// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.i377.team28.web;

import ee.itcollege.i377.team28.entities.ISIKU_SEADUS_INTSIDENDID;
import ee.itcollege.i377.team28.entities.OBJEKTI_SEADUS_INTSIDENDIS;
import ee.itcollege.i377.team28.entities.PIIRIVALVE_SEADUS_INTSIDENDI;
import ee.itcollege.i377.team28.entities.SEADUS;
import ee.itcollege.i377.team28.entities.SEADUSE_PUNKT;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect SEADUSE_PUNKTController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String SEADUSE_PUNKTController.create(@Valid SEADUSE_PUNKT SEADUSE_PUNKT, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("SEADUSE_PUNKT", SEADUSE_PUNKT);
            addDateTimeFormatPatterns(uiModel);
            return "seaduse_punkts/create";
        }
        uiModel.asMap().clear();
        SEADUSE_PUNKT.persist();
        return "redirect:/seaduse_punkts/" + encodeUrlPathSegment(SEADUSE_PUNKT.getSeaduse_punkt_id().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String SEADUSE_PUNKTController.createForm(Model uiModel) {
        uiModel.addAttribute("SEADUSE_PUNKT", new SEADUSE_PUNKT());
        addDateTimeFormatPatterns(uiModel);
        return "seaduse_punkts/create";
    }
    
    @RequestMapping(value = "/{seaduse_punkt_id}", method = RequestMethod.GET)
    public String SEADUSE_PUNKTController.show(@PathVariable("seaduse_punkt_id") Long seaduse_punkt_id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("seaduse_punkt", SEADUSE_PUNKT.findSEADUSE_PUNKT(seaduse_punkt_id));
        uiModel.addAttribute("itemId", seaduse_punkt_id);
        return "seaduse_punkts/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String SEADUSE_PUNKTController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("seaduse_punkts", SEADUSE_PUNKT.findSEADUSE_PUNKTEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) SEADUSE_PUNKT.countSEADUSE_PUNKTs() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("seaduse_punkts", SEADUSE_PUNKT.findAllSEADUSE_PUNKTs());
        }
        addDateTimeFormatPatterns(uiModel);
        return "seaduse_punkts/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String SEADUSE_PUNKTController.update(@Valid SEADUSE_PUNKT SEADUSE_PUNKT, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("SEADUSE_PUNKT", SEADUSE_PUNKT);
            addDateTimeFormatPatterns(uiModel);
            return "seaduse_punkts/update";
        }
        uiModel.asMap().clear();
        SEADUSE_PUNKT.merge();
        return "redirect:/seaduse_punkts/" + encodeUrlPathSegment(SEADUSE_PUNKT.getSeaduse_punkt_id().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{seaduse_punkt_id}", params = "form", method = RequestMethod.GET)
    public String SEADUSE_PUNKTController.updateForm(@PathVariable("seaduse_punkt_id") Long seaduse_punkt_id, Model uiModel) {
        uiModel.addAttribute("SEADUSE_PUNKT", SEADUSE_PUNKT.findSEADUSE_PUNKT(seaduse_punkt_id));
        addDateTimeFormatPatterns(uiModel);
        return "seaduse_punkts/update";
    }
    
    @RequestMapping(value = "/{seaduse_punkt_id}", method = RequestMethod.DELETE)
    public String SEADUSE_PUNKTController.delete(@PathVariable("seaduse_punkt_id") Long seaduse_punkt_id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        SEADUSE_PUNKT.findSEADUSE_PUNKT(seaduse_punkt_id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/seaduse_punkts";
    }
    
    @ModelAttribute("isiku_seadus_intsidendids")
    public Collection<ISIKU_SEADUS_INTSIDENDID> SEADUSE_PUNKTController.populateISIKU_SEADUS_INTSIDENDIDs() {
        return ISIKU_SEADUS_INTSIDENDID.findAllISIKU_SEADUS_INTSIDENDIDs();
    }
    
    @ModelAttribute("objekti_seadus_intsidendiss")
    public Collection<OBJEKTI_SEADUS_INTSIDENDIS> SEADUSE_PUNKTController.populateOBJEKTI_SEADUS_INTSIDENDISs() {
        return OBJEKTI_SEADUS_INTSIDENDIS.findAllOBJEKTI_SEADUS_INTSIDENDISs();
    }
    
    @ModelAttribute("piirivalve_seadus_intsidendis")
    public Collection<PIIRIVALVE_SEADUS_INTSIDENDI> SEADUSE_PUNKTController.populatePIIRIVALVE_SEADUS_INTSIDENDIs() {
        return PIIRIVALVE_SEADUS_INTSIDENDI.findAllPIIRIVALVE_SEADUS_INTSIDENDIs();
    }
    
    @ModelAttribute("seadus")
    public Collection<SEADUS> SEADUSE_PUNKTController.populateSEADUS() {
        return SEADUS.findAllSEADUS();
    }
    
    @ModelAttribute("seaduse_punkts")
    public Collection<SEADUSE_PUNKT> SEADUSE_PUNKTController.populateSEADUSE_PUNKTs() {
        return SEADUSE_PUNKT.findAllSEADUSE_PUNKTs();
    }
    
    void SEADUSE_PUNKTController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("SEADUSE_PUNKT_avatud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("SEADUSE_PUNKT_muudetud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("SEADUSE_PUNKT_suletud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    String SEADUSE_PUNKTController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
