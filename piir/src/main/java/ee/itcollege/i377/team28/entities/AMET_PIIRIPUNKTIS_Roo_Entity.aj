// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.i377.team28.entities;

import ee.itcollege.i377.team28.entities.AMET_PIIRIPUNKTIS;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AMET_PIIRIPUNKTIS_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager AMET_PIIRIPUNKTIS.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer AMET_PIIRIPUNKTIS.version;
    
    public Integer AMET_PIIRIPUNKTIS.getVersion() {
        return this.version;
    }
    
    public void AMET_PIIRIPUNKTIS.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void AMET_PIIRIPUNKTIS.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AMET_PIIRIPUNKTIS.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AMET_PIIRIPUNKTIS attached = AMET_PIIRIPUNKTIS.findAMET_PIIRIPUNKTIS(this.amet_piiripunktis_id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AMET_PIIRIPUNKTIS.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AMET_PIIRIPUNKTIS.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public AMET_PIIRIPUNKTIS AMET_PIIRIPUNKTIS.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AMET_PIIRIPUNKTIS merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager AMET_PIIRIPUNKTIS.entityManager() {
        EntityManager em = new AMET_PIIRIPUNKTIS().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AMET_PIIRIPUNKTIS.countAMET_PIIRIPUNKTISs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AMET_PIIRIPUNKTIS o", Long.class).getSingleResult();
    }
    
    public static List<AMET_PIIRIPUNKTIS> AMET_PIIRIPUNKTIS.findAllAMET_PIIRIPUNKTISs() {
        return entityManager().createQuery("SELECT o FROM AMET_PIIRIPUNKTIS o", AMET_PIIRIPUNKTIS.class).getResultList();
    }
    
    public static AMET_PIIRIPUNKTIS AMET_PIIRIPUNKTIS.findAMET_PIIRIPUNKTIS(Long amet_piiripunktis_id) {
        if (amet_piiripunktis_id == null) return null;
        return entityManager().find(AMET_PIIRIPUNKTIS.class, amet_piiripunktis_id);
    }
    
    public static List<AMET_PIIRIPUNKTIS> AMET_PIIRIPUNKTIS.findAMET_PIIRIPUNKTISEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AMET_PIIRIPUNKTIS o", AMET_PIIRIPUNKTIS.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
