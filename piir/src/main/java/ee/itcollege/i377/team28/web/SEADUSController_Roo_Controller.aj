// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.i377.team28.web;

import ee.itcollege.i377.team28.entities.SEADUS;
import ee.itcollege.i377.team28.entities.SEADUSE_PUNKT;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect SEADUSController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String SEADUSController.create(@Valid SEADUS SEADUS, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("SEADUS", SEADUS);
            addDateTimeFormatPatterns(uiModel);
            return "seadus/create";
        }
        uiModel.asMap().clear();
        SEADUS.persist();
        return "redirect:/seadus/" + encodeUrlPathSegment(SEADUS.getSeadus_id().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String SEADUSController.createForm(Model uiModel) {
        uiModel.addAttribute("SEADUS", new SEADUS());
        addDateTimeFormatPatterns(uiModel);
        return "seadus/create";
    }
    
    @RequestMapping(value = "/{seadus_id}", method = RequestMethod.GET)
    public String SEADUSController.show(@PathVariable("seadus_id") Long seadus_id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("seadus", SEADUS.findSEADUS(seadus_id));
        uiModel.addAttribute("itemId", seadus_id);
        return "seadus/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String SEADUSController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("seadus", SEADUS.findSEADUSEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) SEADUS.countSEADUS() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("seadus", SEADUS.findAllSEADUS());
        }
        addDateTimeFormatPatterns(uiModel);
        return "seadus/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String SEADUSController.update(@Valid SEADUS SEADUS, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("SEADUS", SEADUS);
            addDateTimeFormatPatterns(uiModel);
            return "seadus/update";
        }
        uiModel.asMap().clear();
        SEADUS.merge();
        return "redirect:/seadus/" + encodeUrlPathSegment(SEADUS.getSeadus_id().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{seadus_id}", params = "form", method = RequestMethod.GET)
    public String SEADUSController.updateForm(@PathVariable("seadus_id") Long seadus_id, Model uiModel) {
        uiModel.addAttribute("SEADUS", SEADUS.findSEADUS(seadus_id));
        addDateTimeFormatPatterns(uiModel);
        return "seadus/update";
    }
    
    @RequestMapping(value = "/{seadus_id}", method = RequestMethod.DELETE)
    public String SEADUSController.delete(@PathVariable("seadus_id") Long seadus_id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        SEADUS.findSEADUS(seadus_id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/seadus";
    }
    
    @ModelAttribute("seadus")
    public Collection<SEADUS> SEADUSController.populateSEADUS() {
        return SEADUS.findAllSEADUS();
    }
    
    @ModelAttribute("seaduse_punkts")
    public Collection<SEADUSE_PUNKT> SEADUSController.populateSEADUSE_PUNKTs() {
        return SEADUSE_PUNKT.findAllSEADUSE_PUNKTs();
    }
    
    void SEADUSController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("SEADUS_avatud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("SEADUS_muudetud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("SEADUS_suletud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    String SEADUSController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
