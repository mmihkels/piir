// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.i377.team28.entities;

import ee.itcollege.i377.team28.entities.SEOTUD_KONTAKTISIK;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SEOTUD_KONTAKTISIK_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager SEOTUD_KONTAKTISIK.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer SEOTUD_KONTAKTISIK.version;
    
    public Integer SEOTUD_KONTAKTISIK.getVersion() {
        return this.version;
    }
    
    public void SEOTUD_KONTAKTISIK.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void SEOTUD_KONTAKTISIK.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void SEOTUD_KONTAKTISIK.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SEOTUD_KONTAKTISIK attached = SEOTUD_KONTAKTISIK.findSEOTUD_KONTAKTISIK(this.seotud_kontaktisik_id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void SEOTUD_KONTAKTISIK.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void SEOTUD_KONTAKTISIK.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public SEOTUD_KONTAKTISIK SEOTUD_KONTAKTISIK.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SEOTUD_KONTAKTISIK merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager SEOTUD_KONTAKTISIK.entityManager() {
        EntityManager em = new SEOTUD_KONTAKTISIK().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long SEOTUD_KONTAKTISIK.countSEOTUD_KONTAKTISIKs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM SEOTUD_KONTAKTISIK o", Long.class).getSingleResult();
    }
    
    public static List<SEOTUD_KONTAKTISIK> SEOTUD_KONTAKTISIK.findAllSEOTUD_KONTAKTISIKs() {
        return entityManager().createQuery("SELECT o FROM SEOTUD_KONTAKTISIK o", SEOTUD_KONTAKTISIK.class).getResultList();
    }
    
    public static SEOTUD_KONTAKTISIK SEOTUD_KONTAKTISIK.findSEOTUD_KONTAKTISIK(Long seotud_kontaktisik_id) {
        if (seotud_kontaktisik_id == null) return null;
        return entityManager().find(SEOTUD_KONTAKTISIK.class, seotud_kontaktisik_id);
    }
    
    public static List<SEOTUD_KONTAKTISIK> SEOTUD_KONTAKTISIK.findSEOTUD_KONTAKTISIKEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM SEOTUD_KONTAKTISIK o", SEOTUD_KONTAKTISIK.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
