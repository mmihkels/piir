// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.i377.team28.entities;

import ee.itcollege.i377.team28.entities.SUGULUSE_ROLLI_LIIT;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SUGULUSE_ROLLI_LIIT_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager SUGULUSE_ROLLI_LIIT.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer SUGULUSE_ROLLI_LIIT.version;
    
    public Integer SUGULUSE_ROLLI_LIIT.getVersion() {
        return this.version;
    }
    
    public void SUGULUSE_ROLLI_LIIT.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void SUGULUSE_ROLLI_LIIT.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void SUGULUSE_ROLLI_LIIT.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SUGULUSE_ROLLI_LIIT attached = SUGULUSE_ROLLI_LIIT.findSUGULUSE_ROLLI_LIIT(this.suguluse_rolli_liit_id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void SUGULUSE_ROLLI_LIIT.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void SUGULUSE_ROLLI_LIIT.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public SUGULUSE_ROLLI_LIIT SUGULUSE_ROLLI_LIIT.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SUGULUSE_ROLLI_LIIT merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager SUGULUSE_ROLLI_LIIT.entityManager() {
        EntityManager em = new SUGULUSE_ROLLI_LIIT().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long SUGULUSE_ROLLI_LIIT.countSUGULUSE_ROLLI_LIITs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM SUGULUSE_ROLLI_LIIT o", Long.class).getSingleResult();
    }
    
    public static List<SUGULUSE_ROLLI_LIIT> SUGULUSE_ROLLI_LIIT.findAllSUGULUSE_ROLLI_LIITs() {
        return entityManager().createQuery("SELECT o FROM SUGULUSE_ROLLI_LIIT o", SUGULUSE_ROLLI_LIIT.class).getResultList();
    }
    
    public static SUGULUSE_ROLLI_LIIT SUGULUSE_ROLLI_LIIT.findSUGULUSE_ROLLI_LIIT(Long suguluse_rolli_liit_id) {
        if (suguluse_rolli_liit_id == null) return null;
        return entityManager().find(SUGULUSE_ROLLI_LIIT.class, suguluse_rolli_liit_id);
    }
    
    public static List<SUGULUSE_ROLLI_LIIT> SUGULUSE_ROLLI_LIIT.findSUGULUSE_ROLLI_LIITEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM SUGULUSE_ROLLI_LIIT o", SUGULUSE_ROLLI_LIIT.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
