// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.i377.team28.web;

import ee.itcollege.i377.team28.entities.KONTAKTI_LIIK;
import ee.itcollege.i377.team28.entities.PIIRIVALVUR;
import ee.itcollege.i377.team28.entities.PIIRIVALVURI_KONTAKT;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PIIRIVALVURI_KONTAKTController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String PIIRIVALVURI_KONTAKTController.create(@Valid PIIRIVALVURI_KONTAKT PIIRIVALVURI_KONTAKT, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("PIIRIVALVURI_KONTAKT", PIIRIVALVURI_KONTAKT);
            addDateTimeFormatPatterns(uiModel);
            return "piirivalvuri_kontakts/create";
        }
        uiModel.asMap().clear();
        PIIRIVALVURI_KONTAKT.persist();
        return "redirect:/piirivalvuri_kontakts/" + encodeUrlPathSegment(PIIRIVALVURI_KONTAKT.getPiirivalvuri_kontakt_id().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String PIIRIVALVURI_KONTAKTController.createForm(Model uiModel) {
        uiModel.addAttribute("PIIRIVALVURI_KONTAKT", new PIIRIVALVURI_KONTAKT());
        addDateTimeFormatPatterns(uiModel);
        return "piirivalvuri_kontakts/create";
    }
    
    @RequestMapping(value = "/{piirivalvuri_kontakt_id}", method = RequestMethod.GET)
    public String PIIRIVALVURI_KONTAKTController.show(@PathVariable("piirivalvuri_kontakt_id") Long piirivalvuri_kontakt_id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("piirivalvuri_kontakt", PIIRIVALVURI_KONTAKT.findPIIRIVALVURI_KONTAKT(piirivalvuri_kontakt_id));
        uiModel.addAttribute("itemId", piirivalvuri_kontakt_id);
        return "piirivalvuri_kontakts/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String PIIRIVALVURI_KONTAKTController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("piirivalvuri_kontakts", PIIRIVALVURI_KONTAKT.findPIIRIVALVURI_KONTAKTEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) PIIRIVALVURI_KONTAKT.countPIIRIVALVURI_KONTAKTs() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("piirivalvuri_kontakts", PIIRIVALVURI_KONTAKT.findAllPIIRIVALVURI_KONTAKTs());
        }
        addDateTimeFormatPatterns(uiModel);
        return "piirivalvuri_kontakts/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String PIIRIVALVURI_KONTAKTController.update(@Valid PIIRIVALVURI_KONTAKT PIIRIVALVURI_KONTAKT, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("PIIRIVALVURI_KONTAKT", PIIRIVALVURI_KONTAKT);
            addDateTimeFormatPatterns(uiModel);
            return "piirivalvuri_kontakts/update";
        }
        uiModel.asMap().clear();
        PIIRIVALVURI_KONTAKT.merge();
        return "redirect:/piirivalvuri_kontakts/" + encodeUrlPathSegment(PIIRIVALVURI_KONTAKT.getPiirivalvuri_kontakt_id().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{piirivalvuri_kontakt_id}", params = "form", method = RequestMethod.GET)
    public String PIIRIVALVURI_KONTAKTController.updateForm(@PathVariable("piirivalvuri_kontakt_id") Long piirivalvuri_kontakt_id, Model uiModel) {
        uiModel.addAttribute("PIIRIVALVURI_KONTAKT", PIIRIVALVURI_KONTAKT.findPIIRIVALVURI_KONTAKT(piirivalvuri_kontakt_id));
        addDateTimeFormatPatterns(uiModel);
        return "piirivalvuri_kontakts/update";
    }
    
    @RequestMapping(value = "/{piirivalvuri_kontakt_id}", method = RequestMethod.DELETE)
    public String PIIRIVALVURI_KONTAKTController.delete(@PathVariable("piirivalvuri_kontakt_id") Long piirivalvuri_kontakt_id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PIIRIVALVURI_KONTAKT.findPIIRIVALVURI_KONTAKT(piirivalvuri_kontakt_id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/piirivalvuri_kontakts";
    }
    
    @ModelAttribute("kontakti_liiks")
    public Collection<KONTAKTI_LIIK> PIIRIVALVURI_KONTAKTController.populateKONTAKTI_LIIKs() {
        return KONTAKTI_LIIK.findAllKONTAKTI_LIIKs();
    }
    
    @ModelAttribute("piirivalvurs")
    public Collection<PIIRIVALVUR> PIIRIVALVURI_KONTAKTController.populatePIIRIVALVURS() {
        return PIIRIVALVUR.findAllPIIRIVALVURS();
    }
    
    @ModelAttribute("piirivalvuri_kontakts")
    public Collection<PIIRIVALVURI_KONTAKT> PIIRIVALVURI_KONTAKTController.populatePIIRIVALVURI_KONTAKTs() {
        return PIIRIVALVURI_KONTAKT.findAllPIIRIVALVURI_KONTAKTs();
    }
    
    void PIIRIVALVURI_KONTAKTController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("PIIRIVALVURI_KONTAKT_alates_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("PIIRIVALVURI_KONTAKT_kuni_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("PIIRIVALVURI_KONTAKT_avatud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("PIIRIVALVURI_KONTAKT_muudetud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("PIIRIVALVURI_KONTAKT_suletud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    String PIIRIVALVURI_KONTAKTController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
